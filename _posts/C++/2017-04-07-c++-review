---
layout: life
category : C++
duoshuo: true
date: 2017-04-07
title: C++复习
---

	作者: MrZhong
	时间: 2017-04-07
	版本: 0.0.1

-----------
1.类成员函数的重载、覆盖和隐藏区别

成员函数被重载的特征：

（1）相同的范围（在同一个类中）；

（2）函数名字相同；

（3）参数不同；

（4）virtual 关键字可有可无。

覆盖是指派生类函数覆盖基类函数，特征是：

（1）不同的范围（分别位于派生类与基类）；

（2）函数名字相同；

（3）参数相同；

（4）基类函数必须有virtual 关键字。

“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下：

（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。

（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual 关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）

2. const char *p,   char *const p;的区别

如果const位于星号的左侧，则const就是用来修饰指针所指向的变量，即指针指向为常量；

如果const位于星号的右侧，const就是修饰指针本身，即指针本身是常量。


3.函数重载是什么意思？它与虚函数的概念有什么区别？

函数重载是一个同名函数完成不同的功能，编译系统在编译阶段通过函数参数个数、参数类型不同，即实现的是静态的多态性。但是记住：不能仅仅通过函数返回值不同来实现函数重载。而虚函数实现的是在基类中通过使用关键字virtual来申明一个函数为虚函数，含义就是该函数的功能可能在将来的派生类中定义或者在基类的基础之上进行扩展，系统只能在运行阶段才能动态决定该调用哪一个函数，所以实现的是动态的多态性。它体现的是一个纵向的概念，也即在基类和派生类间实现。

4.面向对象的三个基本特征，并简单叙述之？

封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。

继承它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。
继承概念的实现方式有三类：实现继承、接口继承和可视继承。

多态，简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。
实现多态，有二种方式，覆盖，重载。
覆盖，是指子类重新定义父类的虚函数的做法。
重载，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。

作用总结：

封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了??代码重用。而多态则是为了实现另一个目的??接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。

5.如何定义和实现一个类的成员函数为回调函数？

所谓的回调函数，就是预先在系统对函数进行注册，让系统知道这个函数的存在，以后，当某个事件发生时，再调用这个函数对事件进行响应。
定义一个类的成员函数时在该函数名前加CALLBACK即将其定义为回调函数，函数的实现和普通成员函数没有区别


 6.main 函数执行以前，还会执行什么代码？

 delete与 delete []区别：

 7.解释堆和栈的区别。

栈区（stack）—   由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。
堆:一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。

8.简述数组与指针的区别？

数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。
指针可以随时指向任意类型的内存块。

9.内存的分配方式

分配方式有三种，
1)、 静态存储区，是在程序编译时就已经分配好的，在整个运行期间都存在，如全局变量、常量。
2)、 栈上分配，函数内的局部变量就是从这分配的，但分配的内存容易有限。
3)、 堆上分配，也称动态分配，如我们用new,malloc分配内存，用delete,free来释放的内存。

10. char * strcpy(char * strDest,const char * strSrc);不调用库函数，实现strcpy函数。

	const char *strcpy(char *src,const char *des)
	{
		char *tem = src;
		if(des != nullptr)
		{
			while(des != "\0")
			{
				*src++ = *des++;
			}
			*src = "\0"；
		}
		return tem;
	}

11.String 的原型

	String::String(const char *str = NULL)
	{
		if(str == NULL)
		{
			m_data = new char[1];
			m_data[0] = "";
		}else
		{
			m_data = new char[strlen(str)+1];
			strcpy(m_data,str);
		}
	}

	String::String(const String &other)
	{
		
	}

	String &operate = (const String &other)
	{
		if(this == other)
		reurn *this;
		delete []m_data;
		m_data = new char[strlen(other.m_data)+1];
		strcpy(m_data,other.m_data);
		return *this;
	}

12.如何打印出当前源文件的文件名以及源文件的当前行号？

	cout << _FILE_
	cout << _LINE_

13.排序算法：对一组整数进行排序

1).选择排序，每次从无序数组中选出一个最小的出来，放到已排好的数组的最后。


	void selectSort(int arr[])
	{
		
		for(int i = 0;i<sizeof(arr)/4;i++)
		{
			int index = i;
			for(int j = i+1;j<sizeof(arr)/4;j++)
			{
				if(arr[j]<arr[index])
				{
					index = j;
				}
			}
			if(i != index)
			{
				int temp = arr[i];
				arr[i] = arr[index];
				arr[index] = t;
			}
		}

	}

2).冒泡排序 基本思想：两两比较待排序的数，发现反序时交换，直到没有反序为止。

	public static void BubbleSort(int[] R)
	{
	    for (int i = 0; i < R.Length - 1; i++)
	    {
	        bool noswap = true;
	        for (int j = 0; j < R.Length - 1-i; j++)
	        {
	            if (R[j] > R[j + 1])
	            {
	                int temp = R[j];
	                R[j] = R[j + 1];
	                R[j + 1] = temp;
	                noswap = false;
	            }
	        }
	        if (noswap)
	        {
	            break;
	        }
	    }
	}


13.两种常用的实现隐式类类型转换的方式是什么？如何避免隐式类型转换？

(1)、 
a、使用单参数的构造函数或N个参数中有N-1个是默认参数的构造函数，如：

	class A
	{
	public：
	      A(stirng s);
	      A(string s,int a = 0);
	};

b、使用operator what_you_want_to_convert_type() const

        class A
        {
        public:
                operator char*() const
                {
                    return data;//当从其他类型转换到char*时自动调用
                }
        private:
                char* data;
        };

(2)、在单参数的构造函数或N个参数中有N-1个是默认参数的构造函数声明之前加上explicit。

14.malloc和new的区别是什么


15.如何实现一个不能在堆分配的类，如何实现一个不能被继承的类

如何实现一个不能在堆上分配的类，如果要在堆上分配就是会使用new，所以可以重载new 操作符，并将其重载于class A的private内：

	class A 
	{
	public:
	    A(int a):_x(a){}
	    int Display() {
	        return _x;
	    }
	    void setVal(int x) {
	        _x = x;
	        return;
	    }
	private:
	    //
	    int _x;
	    void* operator new(size_t t){
	    }
	};

如何实现一个不能被继承的类，这里有一个比较简单的方法，利用C++11的新关键字final：

	class B final {
	public:
	    B(int a) {
	    }
	};


16.stl

vector - 会自动增长的数组，最大的优势就是随机访问的能力。前端和中间对数据进行操作必然会引起数据块的移动，
这对性能影响是非常大的。

list - 擅长插入删除的链表，所有数据单元的内存都不连续，list只有一个一个遍历来删除

deque - 拥有vector和list两者优点的双端队列

set
set类似于数学里面的集合，不过set的集合中不包含重复的元素，这是和vector的第一个区别，第二个区别是set内部用平衡二叉树实现，便于元素查找，而vector是使用连续内存存储，便于随机存取。

stl小结 

在实际使用过程中，到底选择这几种容器中的哪一个，应该根据遵循以下原则：
１、如果需要高效的随机存取，不在乎插入和删除的效率，使用vector；
2、如果需要大量的插入和删除元素，不关心随机存取的效率，使用list；
3、如果需要随机存取，并且关心两端数据的插入和删除效率，使用deque；
4、如果打算存储数据字典，并且要求方便地根据key找到value，一对一的情况使用map，一对多的情况使用multimap；
5、如果打算查找一个元素是否存在于某集合中，唯一存在的情况使用set，不唯一存在的情况使用multiset。

