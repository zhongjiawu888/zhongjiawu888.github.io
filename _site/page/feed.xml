<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSS - MrZhong's Blog</title>
    <description>MrZhong's Blog - 不忘初心，逐梦前行</description>
    <link>zhongjiawu888.github.io</link>
    <atom:link href="zhongjiawu888.github.io/page/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 06 Feb 2017 21:17:37 +0800</pubDate>
    <lastBuildDate>Mon, 06 Feb 2017 21:17:37 +0800</lastBuildDate>
    <generator>zhongjiawu</generator>
    
      <item>
        <title>卒</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2088年10月1日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Good-bye&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lifeRes/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 01 Oct 2088 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2088/10/01/dead.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2088/10/01/dead.html</guid>
        
        <category>Programming Life</category>
        
      </item>
    
      <item>
        <title>char *s 与char s[]的区别</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2017-02-06
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;char s1[] = “hello”;     //定义一个字符数组&lt;/p&gt;

&lt;p&gt;char *s2 = “hello”;     //定义一个指向字符串常量”hello”的指针&lt;/p&gt;

&lt;p&gt;在这里，s1 = &amp;amp;s1[0], s1是个”常量”,始终等于&amp;amp;s1[0],无法更改。s2是个指针变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	#include &amp;lt;iostream&amp;gt;  
	#include &amp;lt;cstdio&amp;gt;  
	using namespace std;  
	  
	int main()  
	{  
	    char s1[] = &quot;hello&quot;;  
	    char *s2 = &quot;hello&quot;;  
	    cout &amp;lt;&amp;lt; sizeof(s1) &amp;lt;&amp;lt; endl;           //输出6，表示数组s1所占的字节  
	    cout &amp;lt;&amp;lt; sizeof(s2) &amp;lt;&amp;lt; endl;           //输出4，表示指针变量s2是4个字节  
	  
	    return 0;  
	}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;赋值上，可以这么使用s2 = s1， 但是不能s1 = s2，以为上面说过s1恒等于&amp;amp;s1[0]无法改变，所以不可以这么赋值。
也可以这么用s1[0] = ‘a’，因为s1本身就是字符数组，可以更改其中的内容。
但是不可以s2[0] = ‘a’, 因为s2指向一个字符串常量，不可以修改这个常量。&lt;/p&gt;

&lt;p&gt;遍历字符串时，可以用&lt;em&gt;s2++,因为指针变量可以修改，但是不能这么&lt;/em&gt;s1++遍历字符串，因为上面说了s1恒等于&amp;amp;s1[0],不可以修改。&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2017/02/06/char-char.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2017/02/06/char-char.html</guid>
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>git 命令</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2017-01-24
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;# 一、克隆仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git clone https://github.com/zhongjiawu888/zhongjiawu888.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;git-&quot;&gt;二、 git 批量删除文件夹和文件&lt;/h1&gt;

&lt;p&gt;硬盘删除文件后，执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会提示你仍然需要&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git rm &amp;lt;文件&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时如果是要删除大批量文件，这么一个一个命令下去不得累死人啊&lt;/p&gt;

&lt;p&gt;其实可以这样（不管之前有没有已经本地物理删除）&lt;/p&gt;

&lt;p&gt;执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	$ git rm * -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）&lt;/p&gt;

&lt;p&gt;这时删除文件已经进入本地缓存区，&lt;/p&gt;

&lt;p&gt;接下来就是正常的提交操作了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ git add . 
	$ git commit -m &quot;clear&quot;
	$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2017/01/24/git-cmd.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2017/01/24/git-cmd.html</guid>
        
        <category>Other</category>
        
      </item>
    
      <item>
        <title>时间戳和格式化互转</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2017-01-21
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;include-timeh&quot;&gt;include &lt;time.h&gt;&lt;/time.h&gt;&lt;/h1&gt;

&lt;p&gt;1.时间戳转格式化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	int timeSec = 1384936600;
	time_t t;
	struct tm *p /*= new struct tm()*/;
	//t = 1384936600;
	t = (time_t)timeSec;
	p = gmtime(&amp;amp;t);
	char s[200];
	strftime(s, sizeof(s), &quot;%H:%M&quot;, p);
	//strftime(s, sizeof(s), &quot;%Y-%m-%d %H:%M:%S&quot;, p);  
	//delete(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.格式化转时间戳&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct tm* tmp_time = (struct tm*)malloc(sizeof(struct tm));  
strptime(&quot;20131120&quot;,&quot;%Y%m%d&quot;,tmp_time);  
time_t t = mktime(tmp_time);  
printf(&quot;%ld\n&quot;,t);  
free(tmp_time);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 21 Jan 2017 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2017/01/21/long-time-format.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2017/01/21/long-time-format.html</guid>
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>玩家金币(long long)保留2位小数处理</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年12月29日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;资源图片：.0123456789&lt;/p&gt;

&lt;p&gt;函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct NumData
{
	int n;//0：万一下，，1：万，2亿
	std::string str;
	NumData()
	{
		n = 0;
		str = &quot;0&quot;;
	}
};


NumData GetNumber(long long u64Number)
{
	static char s_acBuffer[1024] = { 0 };
	static FireCrackersMgr::NumData s_numData;
	if (u64Number &amp;lt; 10000)
	{
		sprintf(s_acBuffer, &quot;%lld&quot;, u64Number);
		s_numData.n = 0;

	}
	else if (u64Number &amp;lt; 100000000)//万
	{
		float num = u64Number / 10000.0f;
		num = ((int)(num * 100)) / 100.0;//不四舍五入处理;

		char nnnn[20] = { 0 };
		sprintf(nnnn, &quot;%.1f&quot;, num);
		sprintf(s_acBuffer, &quot;%s&quot;, nnnn);
		s_numData.n = 1;

	}
	else if (u64Number &amp;lt; 1000000000000ull)//亿
	{
		float num = u64Number / 100000000.0f;
		num = ((int)(num * 100)) / 100.0;//不四舍五入处理;

		char nnnn[20] = { 0 };
		sprintf(nnnn, &quot;%.1f&quot;, num);
		sprintf(s_acBuffer, &quot;%s&quot;, nnnn);
		s_numData.n = 2;
	}
	else//万亿
	{
		u64Number /= 1000000000000ull;
		sprintf(s_acBuffer, &quot;%lld&quot;, u64Number);
		s_numData.n = 3;
	}
	s_numData.str = s_acBuffer;

	replace_all(s_numData.str, &quot;.&quot;, &quot;/&quot;);// .替换成/

	return s_numData;
}


std::string replace_all(std::string&amp;amp;  str, const std::string&amp;amp; old_value, const std::string&amp;amp;   new_value)
{
	while (true)   {
		string::size_type   pos(0);
		if ((pos = str.find(old_value)) != string::npos)
			str.replace(pos, old_value.length(), new_value);
		else   break;
	}
	return   str;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cocos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LabelAtlas * pBasePointNum = LabelAtlas::create(&quot;0&quot;, &quot;hongbaonum.png&quot;, 51, 69, '/');
pBasePointNum-&amp;gt;setString(str);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2017/01/20/bai-shi-qian.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2017/01/20/bai-shi-qian.html</guid>
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>C++新增数据类型long long ,unsigned long long（转）</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年12月29日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;http://blog.csdn.net/rl529014/article/details/50429347&lt;/p&gt;

&lt;p&gt;相比于C++98标准，C++11整型的最大改变就是多了long long。但事实上，long long整型本来就离C++标准很近，早在1995年，long long就被提议写入C++98标准，却被C++标准委员会拒绝了。而后来，long long类型却进入了C99标准，而且也事实上也被很多编译器支持。于是辗转地，C++标准委员会又掉头决定将long long纳入C++11标准。&lt;/p&gt;

&lt;p&gt;long long整型有两种：long long和unsigned long long。在C++11中，标准要求long long整型可以在不同平台上有不同的长度，但至少有64位。我们在写常数字面量时，可以使用LL后缀（或是ll）标识一个long long类型的字面量，而ULL（或ull、Ull、uLL）表示一个unsigned long long类型的字面量。比如：
long long int lli = -9000000000000000000LL;
unsigned long long int ulli = -9000000000000000000ULL;&lt;/p&gt;

&lt;p&gt;就定义了一个有符号的long long变量lli和无符号的unsigned long long变量ulli。事实上，在C++11中，还有很多与long long等价的类型。比如对于有符号的，下面的类型是等价的：long long、signed long long、long long int、signed long long int；而unsigned long long和unsigned long long int也是等价的。&lt;/p&gt;

&lt;p&gt;同其他的整型一样，要了解平台上long long大小的方法就是查看&lt;climits&gt;（或&lt;limits.h&gt;中的宏）。与long long整型相关的一共有3个：LLONG_MIN、LLONG_MAX和ULLONG_MIN，它们分别代表了平台上最小的long long值、最大的long long值，以及最大的unsigned long long值。可以看看下面这个例子，如代码清单2-5所示。&lt;/limits.h&gt;&lt;/climits&gt;&lt;/p&gt;

&lt;p&gt;代码清单2-5
[cpp] view plain copy print?
#include &lt;climits&gt;  
#include &lt;cstdio&gt;  
using namespace std;  &lt;/cstdio&gt;&lt;/climits&gt;&lt;/p&gt;

&lt;p&gt;int main()&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif;&quot;&gt;{&lt;/span&gt;  
[cpp] view plain copy print?
    long long ll_min = LLONG_MIN;  
    long long ll_max = LLONG_MAX;  
    unsigned long long ull_max = ULLONG_MAX;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printf(&quot;min of long long: %lld\n&quot;, ll_min); // min of long long: -9223372036854775808  
printf(&quot;max of long long: %lld\n&quot;, ll_max); // max of long long: 9223372036854775807  
printf(&quot;max of unsigned long long: %llu\n&quot;, ull_max);   // max of unsigned long long: 18446744073709551615   }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;// 编译选项:g++ -std=c++11 2-2-1.cpp&lt;/p&gt;

&lt;p&gt;在代码清单2-5中，将以上3个宏打印了出来，对于printf函数来说，输出有符号的long long类型变量可以用符号%lld，而无符号的unsigned long long则可以采用%llu。18446744073709551615用16进制表示是0xFFFFFFFFFFFFFFFF（16个F），可知在我们的实验机上，long long是一个64位的类型。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2016/12/29/unsigned-long-long.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2016/12/29/unsigned-long-long.html</guid>
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>线程 （转）</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年12月28日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2016/12/28/thread.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2016/12/28/thread.html</guid>
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>android ios内嵌网页</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年12月13日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;源码整理&lt;/p&gt;

&lt;p&gt;一、创建一个cocos界面&lt;/p&gt;

&lt;p&gt;//————–  ActivityLayer.h  ———————-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ActivityLayer:public Layer
{
public:
    ActivityLayer();
    virtual ~ActivityLayer();
    static ActivityLayer *create();


private:
    virtual bool init();

    virtual void onEnter();
    virtual void onExit();

    void handleCloseEvent(Ref* pSender);
    CCRect changeRectToPhone(const CCRect &amp;amp;rt);

private:
    //活动内嵌网页
    ODUIWebView *m_pActivityWebView;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//————–  ActivityLayer.cpp ———————-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActivityLayer::ActivityLayer()
{
}

ActivityLayer::~ActivityLayer()
{
}

 

bool ActivityLayer::init()
{

    auto keyboardListener = EventListenerKeyboard::create();
    keyboardListener-&amp;gt;onKeyReleased = CC_CALLBACK_2(ActivityLayer::onKeyReleased, this);
    _eventDispatcher-&amp;gt;addEventListenerWithSceneGraphPriority(keyboardListener, this);

    //标题
    auto rootNode = CSLoader::createNode(&quot;ActivityLayer.csb&quot;);
    addChild(rootNode);

    auto webPanel = static_cast&amp;lt;Layout*&amp;gt;(rootNode-&amp;gt;getChildByName(&quot;PanelWeb&quot;));
    auto m_pBtnClose = static_cast&amp;lt;Button*&amp;gt;(rootNode-&amp;gt;getChildByName(&quot;ButtonBack&quot;));
    m_pBtnClose-&amp;gt;addClickEventListener(CC_CALLBACK_1(ActivityLayer::handleCloseEvent, this));


    m_pActivityWebView = new ODUIWebView();
    CCRect rtWeb = CCRect(webPanel-&amp;gt;getPosition(), webPanel-&amp;gt;getContentSize());
    rtWeb = changeRectToPhone(rtWeb);
    m_pActivityWebView-&amp;gt;ShowWebView(&quot;www.baidui.com&quot;
        , rtWeb.origin.x, rtWeb.origin.y, rtWeb.size.width, rtWeb.size.height);


    return true;
}

void ActivityLayer::handleCloseEvent(Ref* pSender)
{
    m_pActivityWebView-&amp;gt;RemoveWebView();
    delete m_pActivityWebView;
    m_pActivityWebView = NULL;

}

CCRect ActivityLayer::changeRectToPhone(const CCRect &amp;amp;rt)
{
    CCSize winSize = CCDirector::sharedDirector()-&amp;gt;getWinSize();
    float xScale = CCDirector::sharedDirector()-&amp;gt;getOpenGLView()-&amp;gt;getScaleX();
    float yScale = CCDirector::sharedDirector()-&amp;gt;getOpenGLView()-&amp;gt;getScaleY();

    return CCRect(rt.origin.x*xScale, (winSize.height - (rt.origin.y + rt.size.height))*yScale, rt.size.width*xScale, rt.size.height*yScale);
}

void ActivityLayer::onEnter()
{
    Layer::onEnter();
}

void ActivityLayer::onExit()
{
    if (m_pActivityWebView)
    {
        m_pActivityWebView-&amp;gt;RemoveWebView();
        delete m_pActivityWebView;
        m_pActivityWebView = NULL;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、平台封装&lt;/p&gt;

&lt;p&gt;//————–  ODUIWebView.h ———————-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma once

#include &quot;cocos2d.h&quot;

#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    #include &quot;../Platform/WebViewClass.h&quot;
#endif

USING_NS_CC;

class ODUIWebView
{
public:
    ODUIWebView();

    virtual ~ODUIWebView();

    void ShowWebView(const char* pcUrl, float x, float y, float f32Width, float f32Height, int nLoadCache = 0);

    void UpdateUrl(const char* pcUrl, int nLoadCache = 0, const char* orPcUrl = NULL);

    void RemoveWebView(const char* orPcUrl = NULL);

    bool IsShowWebView();

private:
#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    CWebView* m_pkIosWebView;
#endif
    bool m_bIsShowWeb;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//————–  ODUIWebView.cpp ———————-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &quot;ODUIWebView.h&quot;
#define ANDROID_PACKAGE_NAME &quot;com/odao/fish/AdaoFish&quot;

#if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
#include &quot;platform\android\jni\JniHelper.h&quot;
#include &amp;lt;jni.h&amp;gt;
#endif

ODUIWebView::ODUIWebView() : m_bIsShowWeb(false)
{
#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    m_pkIosWebView = nullptr;
    if (!m_pkIosWebView) {
        m_pkIosWebView = new CWebView;
    }
#endif
}

ODUIWebView::~ODUIWebView()
{
#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    if (m_pkIosWebView) {
        delete m_pkIosWebView;
        m_pkIosWebView = nullptr;
    }
#endif
}

void ODUIWebView::ShowWebView( const char* pcUrl, float x, float y, float f32Width, float f32Height, int nLoadCache)
{
#if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)

    JniMethodInfo t;
    jobject activityObj;

    if (JniHelper::getStaticMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;GetJavaActivity&quot;, &quot;()Ljava/lang/Object;&quot;))
    {
        activityObj = t.env-&amp;gt;CallStaticObjectMethod(t.classID, t.methodID);
    }

    if (JniHelper::getMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;DisplayWebView&quot;, &quot;(IIIIIJLjava/lang/String;)V&quot;))
    {
        int jX = (int)x;
        jint jY = (int)y;
        jint jWidth = (int)f32Width;
        jint jHeight = (int)f32Height;
        jint jLoadCache = nLoadCache;
        jlong jaddress = (unsigned long)this;

        jstring jmsg2 = t.env-&amp;gt;NewStringUTF(pcUrl);

        t.env-&amp;gt;CallVoidMethod(activityObj, t.methodID, jX, jY, jWidth, jHeight, jLoadCache, jaddress, jmsg2);
    }

    if (JniHelper::getMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;UpdateURL&quot;, &quot;(Ljava/lang/String;IJLjava/lang/String;)V&quot;))
    {
        jstring jmsg = t.env-&amp;gt;NewStringUTF(pcUrl);
        jint jLoadCache = nLoadCache;
        jlong jaddress2 = (unsigned long)this;
        t.env-&amp;gt;CallVoidMethod(activityObj, t.methodID, jmsg, nLoadCache, jaddress2, jmsg);
    }
#endif
#if(CC_TARGET_PLATFORM == CC_PLATFORM_WIN32) 

#endif

#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    float winX = Director::getInstance()-&amp;gt;getWinSize().width;
    float winY = Director::getInstance()-&amp;gt;getWinSize().height;

    if ((winX == 960 &amp;amp;&amp;amp; winY == 640) ||
        (winX == 1136 &amp;amp;&amp;amp; winY == 640) ||
        (winX == 2048 &amp;amp;&amp;amp; winY == 1536))
    {
        x /= 2.0f;
        y /= 2.0f;
        f32Width /= 2.0f;
        f32Height /= 2.0f;
    }
    m_pkIosWebView-&amp;gt;ShowWebView(pcUrl, x, y, f32Width, f32Height);
#endif
    m_bIsShowWeb = true;
}

void ODUIWebView::UpdateUrl( const char* pcUrl, int nLoadCache, const char* orPcUrl)
{
#if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
    JniMethodInfo t;
    jobject activityObj;

    if (JniHelper::getStaticMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;GetJavaActivity&quot;, &quot;()Ljava/lang/Object;&quot;))
    {
        activityObj = t.env-&amp;gt;CallStaticObjectMethod(t.classID, t.methodID);
    }

    if (JniHelper::getMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;UpdateURL&quot;, &quot;(Ljava/lang/String;IJLjava/lang/String;)V&quot;))
    {
        jstring jmsg = t.env-&amp;gt;NewStringUTF(pcUrl);
        jint jLoadCache = nLoadCache;
        jstring jmsg2 = t.env-&amp;gt;NewStringUTF(orPcUrl);
        jlong jaddress = (unsigned long)this;
        t.env-&amp;gt;CallVoidMethod(activityObj, t.methodID, jmsg, nLoadCache, jaddress, jmsg2);
    }
#endif

#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    m_pkIosWebView-&amp;gt;UpdateUrl(pcUrl);
#endif
}

void ODUIWebView::RemoveWebView(const char* orPcUrl)
{
    if (m_bIsShowWeb)
    {
#if(CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
        JniMethodInfo t;
        jobject activityObj;

        if (JniHelper::getStaticMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;GetJavaActivity&quot;, &quot;()Ljava/lang/Object;&quot;))
        {
            activityObj = t.env-&amp;gt;CallStaticObjectMethod(t.classID, t.methodID);
        }

        if (JniHelper::getMethodInfo(t, ANDROID_PACKAGE_NAME, &quot;RemoveWebView&quot;, &quot;(JLjava/lang/String;)V&quot;))
        {
            jstring jmsg = t.env-&amp;gt;NewStringUTF(orPcUrl);
            jlong jaddress = (unsigned long)this;
            t.env-&amp;gt;CallVoidMethod(activityObj, t.methodID, jaddress, jmsg);
        }
#endif

#if(CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
        m_pkIosWebView-&amp;gt;RemoveWebView();
#endif
        m_bIsShowWeb = false;
    }
}

bool ODUIWebView::IsShowWebView()
{
    return m_bIsShowWeb;
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、Android实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static Activity m_pkActInstance;
private LinearLayout m_kWebLayout = null;
private WebView m_kWebView = null;
private Map&amp;lt;Long, Map&amp;lt;String, WebView&amp;gt; &amp;gt; m_kWebViewMap;
private Map&amp;lt;Long, Map&amp;lt;String, LinearLayout&amp;gt; &amp;gt; m_kWebLayoutMap;


onCreate方法：
m_pkActInstance = this;
m_kWebViewMap = new HashMap&amp;lt;Long, Map&amp;lt;String,WebView&amp;gt; &amp;gt;();
m_kWebLayoutMap  = new HashMap&amp;lt;Long, Map&amp;lt;String, LinearLayout&amp;gt; &amp;gt;();

public static Object GetJavaActivity() {
    Log.d(&quot;What&quot;, &quot;GetJavaActivity&quot;);
    return m_pkActInstance;
}

public void DisplayWebView(final int x, final int y, final int width, final int height, final int nLoadCache, final long address, final String url) {
    
    this.runOnUiThread(new Runnable() {
        public void run() {
            
            //Map&amp;lt;Integer, Map&amp;lt;String, WebView&amp;gt; &amp;gt;
            Map&amp;lt;String, WebView&amp;gt; valueMap = m_kWebViewMap.get(address);
            Map&amp;lt;String, LinearLayout&amp;gt; valueLayoutMap = m_kWebLayoutMap.get(address);
            
            if(null == valueLayoutMap) {
                m_kWebLayout = new LinearLayout(m_pkActInstance);
                m_pkActInstance.addContentView(m_kWebLayout, new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));
                valueLayoutMap = new HashMap&amp;lt;String, LinearLayout&amp;gt;();
                valueLayoutMap.put(url, m_kWebLayout);
                m_kWebLayoutMap.put(address, valueLayoutMap);
            }
            else {
                LinearLayout weblayout = valueLayoutMap.get(url);
                
                if(null == weblayout) {
                    m_kWebLayout = new LinearLayout(m_pkActInstance);
                    m_pkActInstance.addContentView(m_kWebLayout, new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));
                    valueLayoutMap.put(url, m_kWebLayout);
                }
                else {
                    m_kWebLayout = weblayout;
                }
            }
            
        
            if(null == valueMap) {
                m_kWebView = new WebView(m_pkActInstance);
                m_kWebLayout.addView(m_kWebView);
                
                valueMap = new HashMap&amp;lt;String, WebView&amp;gt;();
                valueMap.put(url, m_kWebView);
                
                m_kWebViewMap.put(address, valueMap);
            }
            else {
                WebView webView = valueMap.get(url);
                
                if(null == webView) {
                    m_kWebView = new WebView(m_pkActInstance);
                    valueMap.put(url, m_kWebView);
                    m_kWebLayout.addView(m_kWebView);
                }
                else {
                    m_kWebView = webView;
                }
            }
            
            Log.d(&quot;DisplayWebView-----&quot;, url);
            
            LinearLayout.LayoutParams linearParams = (LinearLayout.LayoutParams) m_kWebView.getLayoutParams();
            linearParams.leftMargin = x;
            linearParams.topMargin = y;
            linearParams.width = width;
            linearParams.height = height;
            
            m_kWebView.setBackgroundColor(0);
        
            int screenDensity = getResources().getDisplayMetrics().densityDpi ;   
            WebSettings.ZoomDensity zoomDensity = WebSettings.ZoomDensity.FAR ;   
            switch (screenDensity){   
            case DisplayMetrics.DENSITY_LOW :  
                zoomDensity = WebSettings.ZoomDensity.CLOSE;  
                break;  
            case DisplayMetrics.DENSITY_MEDIUM:  
                zoomDensity = WebSettings.ZoomDensity.MEDIUM;  
                break;  
            case DisplayMetrics.DENSITY_HIGH:  
                zoomDensity = WebSettings.ZoomDensity.FAR;  
                break ;  
            default:
                 zoomDensity = WebSettings.ZoomDensity.FAR;  
                break ;  
            }  
            //m_kWebView.getSettings().setDefaultZoom( WebSettings.ZoomDensity.MEDIUM);  
            m_kWebView.getSettings().setDefaultZoom( zoomDensity); 
            
            m_kWebView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);
            m_kWebView.getSettings().setAppCacheEnabled(false);
            m_kWebView.getSettings().setUseWideViewPort(true); 
            m_kWebView.getSettings().setLoadWithOverviewMode(true);
            m_kWebView.getSettings().setJavaScriptEnabled(true);
            m_kWebView.getSettings().setLayoutAlgorithm(LayoutAlgorithm.NORMAL); 
            
            m_kWebView.setLayoutParams(linearParams);
            
            m_kWebView.setBackgroundColor(0); // 设置背景色  
            Drawable a = m_kWebView.getBackground();
            
            if(a != null) {
                a.setAlpha(0); // 设置填充透明度 范围：0-255
            }
            else {
                Log.d(&quot;What&quot;, &quot;null null null null null!&quot;);
            }
            m_kWebView.setWebViewClient(new WebViewClient(){
                @Override
                public boolean shouldOverrideUrlLoading(WebView view, String url)
                {
                    Log.d(&quot;What&quot;, &quot;url: &quot;+url);
                    return false;  
                }
                
            });
        }
    });
}

public void UpdateURL(final String url, final int nLoadCache, final long address, final String orUrl) {
    this.runOnUiThread(new Runnable() {
        public void run() {
            if(null != orUrl &amp;amp;&amp;amp; !orUrl.isEmpty()) {
                Map&amp;lt;String, WebView&amp;gt; valueMap = m_kWebViewMap.get(address);
                
                if(null != valueMap) {
                    WebView webView = valueMap.get(orUrl);
                    if(null != webView) {
                        m_kWebView = webView;
                        m_kWebView.loadUrl(url);
                    }
                }
            }
            else
            {
                m_kWebView.loadUrl(url);
            }
        }
    });
}

public void RemoveWebView() {
    this.runOnUiThread(new Runnable() {
        public void run() {
            if (m_kWebView != null)
            {
                for(Object a : m_kWebLayoutMap.keySet()){  
                    for(Object b : m_kWebLayoutMap.get(a).keySet()) {
                        m_kWebLayout = m_kWebLayoutMap.get(a).get(b);
                        for(Object o : m_kWebViewMap.keySet()){  
                            for(Object u : m_kWebViewMap.get(o).keySet()) {
                                m_kWebLayout.removeView(m_kWebViewMap.get(o).get(u));  
                                m_kWebViewMap.get(o).get(u).destroy();
                                if(m_kWebViewMap.get(o).get(u) == m_kWebView) {
                                    m_kWebView = null;
                                }
                            }  
                        }
                    }
                }
                
                m_kWebViewMap.clear();
                
                if (m_kWebView != null)
                {
                    for(Object a : m_kWebLayoutMap.keySet()){  
                        for(Object b : m_kWebLayoutMap.get(a).keySet()) {
                            m_kWebLayout = m_kWebLayoutMap.get(a).get(b);
                            m_kWebLayout.removeView(m_kWebView);
                            m_kWebView.destroy();
                            m_kWebView = null;
                        }
                    }
                }
                
                getGLSurfaceView().requestFocus();
            }
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;四、IOS实现&lt;/p&gt;

&lt;p&gt;//============ ODUIWebView_IOS.h ==================    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma once

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface ODUIWebView_IOS : NSObject &amp;lt;UIWebViewDelegate&amp;gt;
{
    UIWebView* m_webview;
}

- (void)ShowWebView_x:(float)x y:(float)y width:(float) widht height:(float)height;

- (void)UpdateURL:(const char*)url;

- (void)RemoveWebView;

@end   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//============ ODUIWebView_IOS.mm ==================      &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;ODUIWebView_IOS.h&quot;
#include &quot;cocos2d.h&quot;
#import &quot;platform/ios/CCEAGLView-ios.h&quot;

@implementation ODUIWebView_IOS


- (void)ShowWebView_x:(float)x y:(float)y width:(float) widht height:(float)height
{
    if (!m_webview)
    {
        m_webview = [[UIWebView alloc] initWithFrame:CGRectMake(x, y, widht, height)];
        [m_webview setDelegate:self];

        auto view = cocos2d::Director::getInstance()-&amp;gt;getOpenGLView();
        CCEAGLView *eaglview = (CCEAGLView *)view-&amp;gt;getEAGLView();
        
        [eaglview addSubview:m_webview];
        [m_webview release];
        
        m_webview.backgroundColor = [UIColor clearColor];
        m_webview.opaque = NO;
        m_webview.scalesPageToFit = YES;
        
        for (UIView *aView in [m_webview subviews])  
        { 
            if ([aView isKindOfClass:[UIScrollView class]])  
            { 
                UIScrollView* scView = (UIScrollView *)aView;
                
                [scView setShowsHorizontalScrollIndicator:NO];

                for (UIView *shadowView in aView.subviews)  
                {
                    if ([shadowView isKindOfClass:[UIImageView class]]) 
                    { 
                        shadowView.hidden = YES;
                    } 
                } 
            } 
        }  
    }
}

- (void)UpdateURL:(const char*)url
{
    NSString *request = [NSString stringWithUTF8String:url];
    [m_webview loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:request] 
                                            cachePolicy:NSURLRequestReloadIgnoringLocalCacheData 
                                        timeoutInterval:60]];
    [m_webview setScalesPageToFit:YES];
}

- (void)RemoveWebView
{
    if (m_webview != nil)
    {
        [m_webview stopLoading];
        [m_webview setDelegate:nil];
        [m_webview removeFromSuperview];
        //[m_webview setDelegate:nil];
        m_webview = nil;
    }
}

- (void)dealloc
{
    NSLog(@&quot;Web view dealloc&quot;);
    [super dealloc];
}

#pragma mark - WebView
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{
    return true;
}

- (void)webViewDidStartLoad:(UIWebView *)webView
{
    CCLOG(&quot;webViewDidStartLoad&quot;);
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    CCLOG(&quot;webViewDidFinishLoad&quot;);
}

- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error
{
    CCLOG(&quot;didFailLoadWithError&quot;);
}

@end 
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2016/12/13/android_ios_webview.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2016/12/13/android_ios_webview.html</guid>
        
        <category>Functions</category>
        
      </item>
    
      <item>
        <title>C++调用Android应用集合</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年12月07日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;一、拨打电话&lt;/p&gt;

&lt;p&gt;1.c++ 调用 Java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string PlatformAndroid::onCallPhone()
{
    std::string str = &quot;&quot;;

#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)

    JniMethodInfo t;
    jstring i;
    if (JniHelper::getStaticMethodInfo(t,
        ANDROID_PACKAGE_NAME,
        &quot;onCallPhone&quot;,
        &quot;()Ljava/lang/String;&quot;))
    {
        i = (jstring)t.env-&amp;gt;CallStaticObjectMethod(t.classID, t.methodID);
        str = JniHelper::jstring2string(i);
        t.env-&amp;gt;DeleteLocalRef(t.classID);
    }
#endif
    return str;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.java 代码实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（1）声明
	public final static int HANDLER_GOTO_PHONENUM = 101;//
	public static Handler mWXHandler = null;
	public static Activity m_pkActInstance; = null;
 （2）实现
	在主activity的onCreate方法中监听handle

	mWXHandler = new Handler(getMainLooper()) {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case HANDLER_GOTO_PHONENUM:{
				Intent intent = new Intent(Intent.ACTION_CALL,Uri.parse(&quot;tel:400-006-6363&quot;));  
				m_pkActInstance.startActivity(intent);          
				break;
			}

定义方法 onCallPhone()

public static String onCallPhone()
{
    
    Message msg = new Message(); 
     msg.what = HANDLER_GOTO_PHONENUM; 
     mWXHandler.sendMessage(msg);   
    return &quot;&quot;;
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、调用手机默然浏览器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static String openBrowser()
{
     Intent intent = new Intent();
     intent.setAction(&quot;android.intent.action.VIEW&quot;);
     Uri content_url = Uri.parse(&quot;http://www.baidu.com&quot;);
     intent.setData(content_url);
     m_pkActInstance.startActivity(intent);
    return &quot;&quot;;
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2016/12/07/dialing_phone.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2016/12/07/dialing_phone.html</guid>
        
        <category>Functions</category>
        
      </item>
    
      <item>
        <title>结构体地址偏移</title>
        <description>&lt;pre&gt;&lt;code&gt;作者: MrZhong
时间: 2016年11月01日
版本: 0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;关于结构体内存对齐（在没有#pragma pack宏的情况下） ：&lt;/p&gt;

&lt;p&gt;原则1、数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机为４字节，则要从4的整数倍地址开始存储）。&lt;/p&gt;

&lt;p&gt;原则2、结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从8的整数倍开始存储。）&lt;/p&gt;

&lt;p&gt;原则3、收尾工作：结构体的总大小，也就是sizeof的结果，必须是其内部最大成员的整数倍，不足的要补齐。&lt;/p&gt;

&lt;p&gt;一、没有#pragma pack宏&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define PRINT_D(intValue)     CCLog(#intValue&quot; is %d\n&quot;, (intValue));
#define OFFSET(struct,member)  ((char *)&amp;amp;((struct *)0)-&amp;gt;member - (char *)0)

typedef struct
{
	char    sex;//0
	short   score;//2
	int     age;//4
	char name;//8 =&amp;gt; size = 8+1+3 = 12
}student;



PRINT_D(sizeof(student))
	PRINT_D(OFFSET(student, sex))
	PRINT_D(OFFSET(student, score))
	PRINT_D(OFFSET(student, age))

	PRINT_D(OFFSET(student, name))



struct A{
	char c1;//0
	int i;//4
	short s;//8
	int j;//12 =&amp;gt; size = 12+4 = 16
}a;


PRINT_D(sizeof(A))
	PRINT_D(OFFSET(A, c1))
	PRINT_D(OFFSET(A, i))
	PRINT_D(OFFSET(A, s))

	PRINT_D(OFFSET(A, j))



struct B{
	int i;//0
	int j;//4
	short s;//8
	char c1;//12
}b;


PRINT_D(sizeof(B))
	PRINT_D(OFFSET(B, i))
	PRINT_D(OFFSET(B, j))
	PRINT_D(OFFSET(B, s))

	PRINT_D(OFFSET(B, c1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sizeof(student) is 12

OFFSET(student, sex) is 0

OFFSET(student, score) is 2

OFFSET(student, age) is 4

OFFSET(student, name) is 8



sizeof(A) is 16

OFFSET(A, c1) is 0

OFFSET(A, i) is 4

OFFSET(A, s) is 8

OFFSET(A, j) is 12



sizeof(B) is 12

OFFSET(B, i) is 0

OFFSET(B, j) is 4

OFFSET(B, s) is 8

OFFSET(B, c1) is 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、有#pragma pack宏定义：&lt;/p&gt;

&lt;h1 id=&quot;pragma-pack2&quot;&gt;pragma pack(2)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;define PRINT_D(intValue)     CCLog(#intValue&quot; is %d\n&quot;, (intValue));
#define OFFSET(struct,member)  ((char *)&amp;amp;((struct *)0)-&amp;gt;member - (char *)0)


typedef struct
{
	char    sex;//0
	short   score;//前一个成员偏移量0+前一个成员大小1+填充1 = 偏移量2 （填充的大小 要使得最后的偏移量是定义的宏2的整数倍）
	int     age;//前一个偏移量2+前一个成员大小2 = 偏移量4
	char name;//前一个偏移量4+前一个成员大小4 = 偏移量8 ，所以size =最后一个成员偏移量8+最后一个成员大小1 +填充1 = 10
}student;



PRINT_D(sizeof(student))
	PRINT_D(OFFSET(student, sex))
	PRINT_D(OFFSET(student, score))
	PRINT_D(OFFSET(student, age))

	PRINT_D(OFFSET(student, name))



struct A{
	char c1;//0
	int i;//2
	short s;//6
	int j;//8 =&amp;gt; size = 8+4 = 12
}a;


PRINT_D(sizeof(A))
	PRINT_D(OFFSET(A, c1))
	PRINT_D(OFFSET(A, i))
	PRINT_D(OFFSET(A, s))

	PRINT_D(OFFSET(A, j))



struct B{
	int i;//0
	int j;//4
	short s;//8
	char c1;//10 + 1 + 1 = 12
}b;


PRINT_D(sizeof(B))
	PRINT_D(OFFSET(B, i))
	PRINT_D(OFFSET(B, j))
	PRINT_D(OFFSET(B, s))

	PRINT_D(OFFSET(B, c1))
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>zhongjiawu888.github.io/blog/2016/11/01/struct_address_offest.html</link>
        <guid isPermaLink="true">zhongjiawu888.github.io/blog/2016/11/01/struct_address_offest.html</guid>
        
        <category>C++</category>
        
      </item>
    
  </channel>
</rss>
